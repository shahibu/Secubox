#!/bin/sh


# Secubox Script for Anonymous Internet Navigation - Transparent proxy through Tor
#
# This script is intended to set up your debian-based Linux distributions anonymity through Tor. 
# The script takes further steps to 
# prevent data leakage by killing dangerous processes, changing MAC 
# address and IP information and so on.
#
# Re - Author: Shahibu J Shabani <nopexinc@gmail.com>
# Copyright (C) 2019 Secubox Version: 1.0
#
# Inspired by "Backbox & ParrotSec anomnymous script" 
#
# GNU GENERAL PUBLIC LICENSE
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# ===================================================================
# General settings
# ===================================================================



# ===================================================================
# Show program banner
# ===================================================================
secubox() { 


cat << "EOF"
      
      _________                  ___.                            
     /   _____/ ____   ____  __ _\_ |__   _______  ___     
     \_____  \_/ __ \_/ ___\|  |  \ __ \ /  _ \  \/  /      
     /        \  ___/\  \___|  |  / \_\ (  <_> >    <        
    /_______  /\___  >\___  >____/|___  /\____/__/\_ \    
            \/     \/     \/          \/            \/      

    Re - Author: Shahibu J Shabani <nopexinc@gmail.com>
  -------------------------------------------------------

EOF


}


# ===================================================================
# Colors for terminal
# ===================================================================

   BLUE='\033[1;94m'
   GREEN='\033[1;92m'
   RED='\033[1;91m'
   PURPLE='\033[1;35m'
   ENDC='\033[1;00m'


# ===================================================================
# Network settings
# ===================================================================
# 
# The UID mostly for debian-based Linux distributions
_tor_uid="debian-tor"

# Tor's TransPort
_trans_port="9040"

# Tor's DNSPort
_dns_port="5353" 

# Tor's VirtualAddrNetworkIPv4
_virt_addr="10.192.0.0/10"

# LAN destinations that shouldn't be routed through Tor
# Check reserved block.
TOR_EXCLUDE="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"

# The default local hostname
REAL_HOSTNAME="secubox"

# Overwrite files to hide contents
OVERWRITE="true"

 



# ===================================================================
# DNS nameservers
# ===================================================================

opendns(){
cat <<EOF > /etc/resolv.conf
# OpeDNS Nameserver IPs
nameserver 208.67.222.222
nameserver 208.67.220.220 
EOF
}

localtor(){
cat <<EOF > /etc/resolv.conf
#Generated by resolvconf
nameserver 127.0.0.1
EOF
}


# ===================================================================
# Print a message when an error occurs
# ===================================================================
# 
check_error_exit()
{
  echo "\n$PURPLE☐ Check Service Tor $ENDC\n"


 if [ ! -e /var/run/tor/tor.pid ]; then 
                service tor start
                 fi

    if grep -q -x 'RUN_DAEMON="yes"' /etc/default/tor >/dev/null
then
    echo "$GREEN☑$ENDC Status: Tor Daemon running"
else
sed -i '12d' /etc/default/tor
sed -i '12 i\RUN_DAEMON="yes"' /etc/default/tor 
echo "$GREEN☑$ENDC Status: Tor Daemon Accept changes"
            exit 1
fi

if grep -q -x '##define virtual network mask' /etc/tor/torrc >/dev/null
then
    echo "$GREEN☑$ENDC Status: ## already added to torrc"
else
 echo "" >> /etc/tor/torrc
 echo "##define virtual network mask" >> /etc/tor/torrc
 echo "$GREEN☑$ENDC Status: ## Successfully added to torrc"
           
fi

if grep -q -x 'VirtualAddrNetwork 10.192.0.0/10' /etc/tor/torrc >/dev/null
then
    echo "$GREEN☑$ENDC Status: VirtualAddrNetwork already added to torrc"
else
 echo "VirtualAddrNetwork 10.192.0.0/10" >> /etc/tor/torrc
 echo "$GREEN☑$ENDC Status: VirtualAddrNetwork has been successfully added to torrc"  
           
fi

if grep -q -x 'AutomapHostsOnResolve 1' /etc/tor/torrc >/dev/null
then
    echo "$GREEN☑$ENDC Status: AutomapHostsOnResolve already added to torrc"
else
 echo "AutomapHostsOnResolve 1" >> /etc/tor/torrc
 echo "$GREEN☑$ENDC Status: AutomapHostsOnResolve has been successfully added to torrc"
           
fi

if grep -q -x 'TransPort 9040' /etc/tor/torrc >/dev/null
then
    echo "$GREEN☑$ENDC Status: TransPort already added to torrc"
else
 echo "TransPort 9040" >> /etc/tor/torrc
 echo "$GREEN☑$ENDC Status: TransPort has been successfully added to torrc"
           
fi

if grep -q -x 'DNSPort 127.0.0.1:53' /etc/tor/torrc >/dev/null
then
    echo "$GREEN☑$ENDC Status: DNSPort already added to torrc"
else
 echo "DNSPort 127.0.0.1:53" >> /etc/tor/torrc
 echo "$GREEN☑$ENDC Status: DNSPort has been successfully added to torrc"
           
fi
 echo "\n$PURPLE☐ Kill Dangerous applications & Clear Cache  $ENDC\n"

}

# ===================================================================
# Check if the program run as a root
# ===================================================================

check_root(){

# Make sure only root can run this script
        if [ $(id -u) -ne 0 ]; then
          echo "\n$RED[!] This script must be run as root$ENDC\n" >&2
          exit 1
        fi
}

# ===================================================================
# Change mac address
# ===================================================================

macaddress(){
    
  #Change the mac address

         change_mac=$( ip route show default | awk '/default/ {print $5}')

         
              if [ -z "$change_mac" ]
            then
              echo "$RED*$ENDC Check internet connection or empty mac address\n"

            else
               echo "\n$PURPLE☐ New mac address$ENDC\n"
               ifconfig $change_mac down | grep "THE END IS NEAR!"
                        macchanger -r $change_mac | grep "ERROR"
                        ifconfig $change_mac up | grep "THE END IS NEAR!"
                macchanger -s $change_mac
            fi

       # End of mac addresschanges


}

# ===================================================================
# Change hostname
# ===================================================================


hostnamechanger(){

        
         echo "\n$PURPLE☐ DHCP address clean $ENDC\n"

         old=$(cat /etc/hostname)
         dhclient -r
         rm -f /var/lib/dhcp/dhclient*
         echo " $GREEN☑$ENDC DHCP address released"
         new=$(shuf -n1 /usr/share/dict/american-english | sed -r 's/[^a-zA-Z]//g' | awk '{print tolower($0)}')
         sed -i "s/$old/$new/g" /etc/hosts
         sed -i "s/$old/$new/g" /etc/hostname
          hostname "$new" 

          echo "\n$PURPLE☐ Hostname change $ENDC\n"
          
         if [ -f "$HOME/.Xauthority" ] ; then
                 su "$SUDO_USER" -c "xauth -n list | grep -v $old | cut -f1 -d\ | xargs -i xauth remove {}"
                 su "$SUDO_USER" -c "xauth add $(xauth -n list | tail -1 | sed 's/^.*\//'$new'\//g')"
                  echo "$GREEN☑$ENDC Hostname file updated"
             fi
            
             avahi-daemon --kill 2>/dev/null

             hostname -F /etc/hostname

             echo "$GREEN☑$ENDC Hostname changed to $new"

    
}

# ===================================================================
# Transparently Routing Traffic Through Tor
# ===================================================================
# https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy

torservice(){

    echo "\n$PURPLE☐ Transparently Routing Traffic Through Tor $ENDC\n"

          if ! [ -f /etc/network/iptables.rules ]; then
           iptables-save > /etc/network/iptables.rules
           echo "$GREEN☑$ENDC Saved iptables rules"
           fi

            iptables -P INPUT ACCEPT
            iptables -P OUTPUT ACCEPT 
            # flush iptables
            iptables -F
            iptables -t nat -F
            echo "$GREEN☑$ENDC Deleted all iptables rules"

            localtor

            # disable ipv6
           sysctl -w net.ipv6.conf.all.disable_ipv6=1
           sysctl -w net.ipv6.conf.default.disable_ipv6=1
     echo "$GREEN☑$ENDC Disabling IPv6 for security reasons\n"

    # set iptables nat
    echo "$GREEN☑$ENDC Configuring iptables rules to route all traffic through tor"
          
           iptables -t nat -A OUTPUT -m owner --uid-owner $_tor_uid -j RETURN

           #set dns redirect
           iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
           iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 53
           iptables -t nat -A OUTPUT -p udp -m owner --uid-owner $_tor_uid -m udp --dport 53 -j REDIRECT --to-ports 53

           #resolve .onion domains mapping 10.192.0.0/10 address space
           iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports $_trans_port
           iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports $_trans_port

           #exclude local addresses
           for NET in $TOR_EXCLUDE 127.0.0.0/9 127.128.0.0/10; do
               iptables -t nat -A OUTPUT -d $NET -j RETURN
               iptables -A OUTPUT -d "$NET" -j ACCEPT
           done

          #redirect all other output through TOR
           iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $_trans_port
           iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $_trans_port
           iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $_trans_port

         #accept already established connections
           iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

           #allow only tor output
           iptables -A OUTPUT -m owner --uid-owner $_tor_uid -j ACCEPT
           iptables -A OUTPUT -j REJECT

            ### Set default policies to DROP for IPv6
            ip6tables -P INPUT DROP
            ip6tables -P FORWARD DROP
            ip6tables -P OUTPUT DROP


         echo "$GREEN☑$ENDC Global Anonymous Proxy Activated"


# ===================================================================
# Check status of program and services
# ===================================================================

}

checktor(){
    
     echo "\n$PURPLE☐ Check Tor status $ENDC\n"
        echo "$GREEN☑$ENDC Please refer to https://check.torproject.org\n"
}



stopall(){
    echo "\n$PURPLE☐ Stopping anonymous mode:$ENDC\n"

            iptables -P INPUT ACCEPT
            iptables -P FORWARD ACCEPT
            iptables -P OUTPUT ACCEPT
            iptables -F
            iptables -X
            iptables -t nat -F
            iptables -t nat -X
            iptables -t mangle -F
            iptables -t mangle -X
            iptables -t raw -F
            iptables -t raw -X

            echo " $GREEN☑$ENDC Deleted all iptables rules\n"
            opendns
      
        echo " $GREEN☑$ENDC Modified resolv.conf to use OpenDNS"


}


# ===================================================================
# Kill exposed process
# ===================================================================
# 
run_bleachbit() {
    if [ "$OVERWRITE" = "true" ] ; then
       
        killall -q chrome dropbox iceweasel skype icedove thunderbird firefox firefox-esr chromium xchat hexchat transmission steam firejail pidgin
        bleachbit -c bash.history system.cache system.clipboard system.custom system.recent_documents system.rotated_logs system.tmp system.trash adobe_reader.cache chromium.cache chromium.current_session chromium.history elinks.history emesene.cache epiphany.cache firefox.url_history flash.cache flash.cookies google_chrome.cache google_chrome.history  links2.history opera.cache opera.search_history opera.url_history &> /dev/null
    else
       echo "$RED*$ENDC Fail to Kill exposed process\n"

    fi

}



# ===================================================================
# Start, stop, restart, status of transparent proxy
# ===================================================================

case "$1" in
    start)
     secubox
     check_root
     # run_bleachbit
     check_error_exit
     service network-manager stop
     # macaddress
     hostnamechanger
     torservice
     checktor
     service network-manager start
    ;;
    stop)
    secubox
    check_root
    # run_bleachbit
    service network-manager stop
    stopall
    service network-manager start
    ;;
    restart)
        $0 stop
        $0 start
    ;;
    status)
secubox
# run_bleachbit


    ;;
    *)
      echo "\n$RED[!] Usage: start hide with {start|stop|restart|status} $ENDC\n" 
    exit 1
    ;;
esac

exit 0

# End of program
# ===================================================================
